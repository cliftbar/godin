<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>30 Minute Post on Odin</title><link>https://www.odinseye.cloud/tags/30-minute-post/</link><description>Recent content in 30 Minute Post on Odin</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 12 Nov 2021 10:54:00 -0800</lastBuildDate><atom:link href="https://www.odinseye.cloud/tags/30-minute-post/index.xml" rel="self" type="application/rss+xml"/><item><title>Input Parameters</title><link>https://www.odinseye.cloud/musings/parameters/</link><pubDate>Fri, 12 Nov 2021 10:54:00 -0800</pubDate><guid>https://www.odinseye.cloud/musings/parameters/</guid><description>This is just a quick overview of the major parameters and measurements provided by NOAA that get pulled into the model. There are a few different sources for these parameters, though in the end the sources all have pretty much the same data.
Time Timestamp Data is generally provided in Track datasets, where each set of measurements has a corresponding timestamp. Includes Year, Month, Day, Hour, and often Minute, but hour is the primary resolution measurements are usually at 6 hour intervals, but sometimes interim measurements are made for large or notables storms Models tend to interpolate between time steps for more uniform coverage Position and Movement Position Provided as a Lat/Lng, to a 10th of a degree resolution Range: 90W-90E, 90S-90N Most NOAA products provide this in the format 1234E, 5678S.</description></item><item><title>Go/Wasm &lt;-> JS Memory</title><link>https://www.odinseye.cloud/musings/go_wasm_memory/</link><pubDate>Tue, 02 Nov 2021 20:56:45 -0700</pubDate><guid>https://www.odinseye.cloud/musings/go_wasm_memory/</guid><description>This post will be about how I accessed the Go/Wasm memory buffer from the Javascript side. I wanted to get this one out, because it took me a very long time to work through it, and I had to piece together a ton of random internet resources. All the code is pulled from the site, but I&amp;rsquo;ve simplified it the best I can.
Go/Wasm instantiation in JS When instantiating the Go/Wasm &amp;ldquo;application&amp;rdquo; in JS-land, its important to keep a reference to the WebAssembly object used in that process.</description></item><item><title>Maps!</title><link>https://www.odinseye.cloud/musings/map/</link><pubDate>Fri, 29 Oct 2021 18:01:32 -0700</pubDate><guid>https://www.odinseye.cloud/musings/map/</guid><description>I played with WebAssembly, and now there&amp;rsquo;s a map!
Well, I hit the &amp;ldquo;compile to WebAssembly&amp;rdquo; button on the Go compiler. Turns out it&amp;rsquo;s not that hard for the basics, which is pretty cool. Most of the work was put into remembering how the GeoJSON format works, so I could do the string formatting on the Go side. I&amp;rsquo;m also taking a bit sending back just a string and parsing the string on the JS side, but it works well enough.</description></item></channel></rss>