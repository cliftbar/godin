<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Musings on Odin</title><link>https://www.odinseye.cloud/musings/</link><description>Recent content in Musings on Odin</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 12 Nov 2021 10:54:00 -0800</lastBuildDate><atom:link href="https://www.odinseye.cloud/musings/index.xml" rel="self" type="application/rss+xml"/><item><title>Input Parameters</title><link>https://www.odinseye.cloud/musings/parameters/</link><pubDate>Fri, 12 Nov 2021 10:54:00 -0800</pubDate><guid>https://www.odinseye.cloud/musings/parameters/</guid><description>This is just a quick overview of the major parameters and measurements provided by NOAA that get pulled into the model. There are a few different sources for these parameters, though in the end the sources all have pretty much the same data.
Time Timestamp Data is generally provided in Track datasets, where each set of measurements has a corresponding timestamp. Includes Year, Month, Day, Hour, and often Minute, but hour is the primary resolution measurements are usually at 6 hour intervals, but sometimes interim measurements are made for large or notables storms Models tend to interpolate between time steps for more uniform coverage Position and Movement Position Provided as a Lat/Lng, to a 10th of a degree resolution Range: 90W-90E, 90S-90N Most NOAA products provide this in the format 1234E, 5678S.</description></item><item><title>Go/Wasm &lt;-> JS Memory</title><link>https://www.odinseye.cloud/musings/go_wasm_memory/</link><pubDate>Tue, 02 Nov 2021 20:56:45 -0700</pubDate><guid>https://www.odinseye.cloud/musings/go_wasm_memory/</guid><description>This post will be about how I accessed the Go/Wasm memory buffer from the Javascript side. I wanted to get this one out, because it took me a very long time to work through it, and I had to piece together a ton of random internet resources. All the code is pulled from the site, but I&amp;rsquo;ve simplified it the best I can.
Go/Wasm instantiation in JS When instantiating the Go/Wasm &amp;ldquo;application&amp;rdquo; in JS-land, its important to keep a reference to the WebAssembly object used in that process.</description></item><item><title>Maps!</title><link>https://www.odinseye.cloud/musings/map/</link><pubDate>Fri, 29 Oct 2021 18:01:32 -0700</pubDate><guid>https://www.odinseye.cloud/musings/map/</guid><description>I played with WebAssembly, and now there&amp;rsquo;s a map!
Well, I hit the &amp;ldquo;compile to WebAssembly&amp;rdquo; button on the Go compiler. Turns out it&amp;rsquo;s not that hard for the basics, which is pretty cool. Most of the work was put into remembering how the GeoJSON format works, so I could do the string formatting on the Go side. I&amp;rsquo;m also taking a bit sending back just a string and parsing the string on the JS side, but it works well enough.</description></item><item><title>Automation!</title><link>https://www.odinseye.cloud/musings/automation/</link><pubDate>Thu, 23 Sep 2021 22:38:17 -0700</pubDate><guid>https://www.odinseye.cloud/musings/automation/</guid><description>Turns out Automation is neat.
After some fairly manic coding, much trial and error, and some grave computing sins (DevOps folks look away), I&amp;rsquo;ve set up a Pipeline for automatically generating hurricane pages on this site. Google Cloud Platform is the MVP here, housing all of the processing pipeline, and (so far) the completely in the free tier. So now new hurricanes will be automatically added to the site as they&amp;rsquo;re tracked by NOAA, and current storms will reflect (more or less) the latest forecasts.</description></item><item><title>NOAA RSS</title><link>https://www.odinseye.cloud/musings/noaa_rss/</link><pubDate>Tue, 14 Sep 2021 17:49:38 -0700</pubDate><guid>https://www.odinseye.cloud/musings/noaa_rss/</guid><description>NOAA RSS Feeds Well, actually they&amp;rsquo;re Atom feeds I guess, but they&amp;rsquo;re basically interchangeable, the library I use handles both automagically, and people know what RSS is. This is more about parsing the data than a web format, so here&amp;rsquo;s a wikipedia link if you care about that.
So, NOAA publishes a ton of data using their feeds, in a few formats. Some is historical data, some is re-analyzed data, graphics, GIS, etc etc.</description></item><item><title>QGIS Scripting</title><link>https://www.odinseye.cloud/musings/qgis_scripting/</link><pubDate>Fri, 10 Sep 2021 00:00:00 +0000</pubDate><guid>https://www.odinseye.cloud/musings/qgis_scripting/</guid><description>Well, this was a hard one.
So, those nice maps on each Hurricane page, I made those in a fantastic open source program called QGIS. I&amp;rsquo;ve been using QGIS on and off for years, and it has consistently been up to the GIS tasks I throw at it. When I had access to ArcGIS, I&amp;rsquo;d frequently use QGIS for things ArcGIS couldn&amp;rsquo;t do easily (or that was behind a paid add-on), and when I drew the short straw and lost the ArcGIS seat no one else could tell the difference.</description></item><item><title>No Ads for now</title><link>https://www.odinseye.cloud/musings/noads/</link><pubDate>Tue, 07 Sep 2021 17:34:04 -0400</pubDate><guid>https://www.odinseye.cloud/musings/noads/</guid><description>Well, it would seem I was too early for Ads.
But first, the setup, which was rather straightforward with Hugo despite not being built in. The first step was creating the partial. That&amp;rsquo;s what Hugo calls a file with an html snippet that gets included into other html files, not to be confused with a shortcode, which is also html, but mostly for putting into markdown (I&amp;rsquo;m probably wrong somewhere, but that&amp;rsquo;s ok for now).</description></item><item><title>Hello!</title><link>https://www.odinseye.cloud/musings/hello/</link><pubDate>Thu, 02 Sep 2021 17:14:08 -0400</pubDate><guid>https://www.odinseye.cloud/musings/hello/</guid><description>I&amp;rsquo;m starting a website for my tropical cyclone models, finally! And also time to spend more effort learning some website developemnt stuff. Hopefully I&amp;rsquo;ll be adding new storms regularly, and update the pages for major active storms with the forecasted windfields.</description></item></channel></rss>